package com.java.tutorial;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.stream.Collector;
import java.util.stream.Collectors;

public class App 
{
    public static void main(String[] args)
    {
       int hello;
       Integer myFirstNumber;
       String name;
       
       hello = 3;
       myFirstNumber = 4;
       name = "Bareto Guachinche!";
       
       if (hello == 3) {
    	   System.out.println("hello == 3!");
       }
       
       if (myFirstNumber.equals(new Integer(4))) {
    	   System.out.println("myFirstNumber == 4!");
       }
       
       if (name == "Bareto Guachinche!") {
    	   System.out.println("Mínimo 2 cervezas!");
       }
       
       //App.learnArrayList();
       //App.leaningMap();
       App.learningCompareComparator();
    }
    
    public static void basicArray() {
    	String myNumberList[];
    	myNumberList = new String[10];
    	
    	myNumberList[2] = "A";
    	
    	//myNumberList.length
    }
    
    public static void vectorArray() {
    	Vector myVectorNumber;
    	
    	myVectorNumber = new Vector();
    	myVectorNumber.add("A");
    	myVectorNumber.add(3);
    	myVectorNumber.add(new Integer(4));
    }
    
    public static void learnArrayList() {
    	List<Integer> mySimpleList;
    	
    	mySimpleList = new ArrayList<Integer>();
    	
    	mySimpleList.add(new Integer(3));
    	mySimpleList.add(new Integer(5));
    	
    	//Recorrer una lista
    	//1º Mediante un FOR
    	for (int i = 0; i < mySimpleList.size(); i++) {
			mySimpleList.get(i);
		}
    	
    	//2º Mediante un ForEach
    	System.out.println("Iteration ForEach");
    	System.out.println("=================");
    	for (Integer currentNumber : mySimpleList) {
			System.out.println("NUMBER: " + currentNumber);
		}
    	
    	//3º Mediante Lambda Expression
    	/*mySimpleList.stream().forEach(singleNumber -> {
    			System.out.println("Number: " + singleNumber);
    			singleNumber++;
    	});*/
    	
    	/*mySimpleList = mySimpleList.stream().map((singleNumber) -> {singleNumber})
    						 .collect(Collectors.toList());*/
    	
    	/*modifiedNumbers.stream().forEach(singleModifiedNumber -> 
    						System.out.println("NUMBER MODIFIED: " +singleModifiedNumber));*/
    	
    	//4º Iterator
    	Iterator<Integer> myIterator = mySimpleList.iterator();
    	
    	while(myIterator.hasNext()) {
    		System.out.println("Number: " + myIterator.next());
    	}
    }
    
    public static void leaningMap() {
    	Map<String, Integer> myMap = new HashMap<String, Integer>();
    	
    	myMap.put("NUMBERO 1", 1);
    	myMap.put("NUMBERO 1", 4);
    	
    	for (Map.Entry<String, Integer> entry: myMap.entrySet()) {
    		System.out.println(entry.getKey());
    		System.out.println(entry.getValue());
    	}
    	
    	/*for (Integer iterable_element : myMap.entrySet()) {
			
		}*/
    }
    
    public static void learningCompareComparator() {
    	Person person1;
    	Person person2;
    	
    	person1 = new Person();
    	person2 = new Person();
    	
    	person1.dni = "123A";
    	person2.dni = "123a";
    	
    	if (person1.equals(person2)) {
    		System.out.println("Person 1 == Person2!");
    	}
    }
    
    public static void stringAndStringbuilderLearning() {
    	String myName = "ABC";
    	myName = new String("ABC");
    	StringBuilder builder = new StringBuilder();
    	
    	builder.append("EAF");
    	builder.append("123");
/*    	myName += "123";
    	myName += "123";
    	myName += "123";
    	myName += "123";
    	myName += "123";
    	myName += "123";
    	myName += "123";
    	myName += "123";
    	myName += "123";
    	myName += "123";
    	myName += "123";
    	myName += "123";
    	myName += "123";
    	myName += "123";
    	myName += "123";
    	myName += "123";
    	myName += "123";
    	myName += "123";
    	myName += "123";
    	myName += "123";
    	myName += "123";
    	myName += "123";
    	myName += "123";
    	myName += "123";*/
    	
    	System.out.println(builder.toString());
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
